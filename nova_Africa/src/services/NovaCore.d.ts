import { NovaMemory, NovaTask, NovaPlugin, NovaAgent, NovaSystemStatus, NovaConfig } from '../types';
declare class NovaCore {
    private memory;
    private tasks;
    private plugins;
    private agents;
    private config;
    private systemStatus;
    private isInitialized;
    private listeners;
    private ollamaErrorLogged;
    private startTime;
    private lastOllamaCheck;
    constructor();
    private getDefaultConfig;
    private getInitialSystemStatus;
    private initializeSystem;
    addMemory(memory: Omit<NovaMemory, 'id' | 'timestamp'>): Promise<string>;
    getMemory(filters?: {
        type?: string;
        tags?: string[];
        importance?: number;
        limit?: number;
    }): NovaMemory[];
    getConversationContext(limit?: number): string;
    private triggerAutonomousThinking;
    private generateInsights;
    private generateLearning;
    private generateAutonomousTasks;
    private extractCommonTopics;
    private analyzeConversationPatterns;
    updateMemory(id: string, updates: Partial<NovaMemory>): Promise<void>;
    createTask(task: Omit<NovaTask, 'id' | 'createdAt' | 'updatedAt'>): Promise<string>;
    updateTask(id: string, updates: Partial<NovaTask>): Promise<void>;
    executeTask(taskId: string): Promise<void>;
    loadPlugin(plugin: NovaPlugin): Promise<void>;
    enablePlugin(id: string): Promise<void>;
    disablePlugin(id: string): Promise<void>;
    sendToAgent(agentId: string, message: string): Promise<string>;
    private sendToOllama;
    private sendToRemoteAgent;
    private startSystemMonitoring;
    private updateSystemStatus;
    private checkOllamaConnection;
    private initializeAgents;
    private addAgent;
    private loadMemoryFromStorage;
    private saveMemoryToStorage;
    private loadTasksFromStorage;
    private saveTasksToStorage;
    private loadPluginsFromStorage;
    private savePluginsToStorage;
    on(event: string, callback: (...args: unknown[]) => void): void;
    private emit;
    private generateId;
    get isReady(): boolean;
    get currentConfig(): NovaConfig;
    get currentStatus(): NovaSystemStatus;
    get allTasks(): NovaTask[];
    get allPlugins(): NovaPlugin[];
    get allAgents(): NovaAgent[];
    get allMemories(): NovaMemory[];
    updateConfig(updates: Partial<NovaConfig>): Promise<void>;
    processCommand(command: string): Promise<string>;
    shutdown(): Promise<void>;
}
export default NovaCore;
//# sourceMappingURL=NovaCore.d.ts.map